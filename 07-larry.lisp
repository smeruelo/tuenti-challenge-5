#!/usr/bin/sbcl --script

(load "quicklisp/setup.lisp")
(require :split-sequence)
(use-package :split-sequence)


(defun init-points (girls points)
  (dolist (name girls)
    (setf (gethash name points) 0)))
  
(defun count-dirty (poll points)
  (maphash #'(lambda (name answers) 
	       (when (first answers)
		 (incf (gethash name points) 7)))
	   poll))

(defun count-superhero (girls poll points relations)
  (dolist (name girls)
    (dolist (f (gethash name relations))
      (when (second (gethash f poll))
	(incf (gethash name points) 3)))))

(defun 2-depth-friends (girl relations)
  (labels ((clean (ff)
	     (remove girl (remove-if #'(lambda (x) 
					 (member x (gethash girl relations) :test #'equal))
				     (remove-duplicates ff :test #'equal)) :test #'equal))
	   (iter (ff new)
	     (if new
		 (iter (append (gethash (car new) relations) ff) (cdr new))
		 ff)))
    (clean (iter nil (gethash girl relations)))))

(defun count-suits (girls poll points relations)
  (dolist (name girls)
    (let ((ff-lst (2-depth-friends name relations)))
      (dolist (ff ff-lst) 
	(when (third (gethash ff poll))
	  (incf (gethash name points) 6))))))

(defun count-cats (girls poll points relations)
  (dolist (name girls)
    (when (member t (mapcar #'(lambda (f)
				(let ((ff-lst (remove name (gethash f relations) :test #'equal)))
				  (and (fourth (gethash f poll))
				       (not (member t (mapcar #'(lambda (ff) 
								  (fourth (gethash ff poll)))
							      ff-lst))))))
			    (gethash name relations)))
      (incf (gethash name points) 4))))

(defun count-shoppers (girls poll points relations)
  (dolist (name girls)
    (let ((reachable (expand-friends name relations)))
      (dolist (g (remove name girls :test #'equal))
	(when (and (fifth (gethash g poll))
		   (not (member g reachable :test #'equal)))
	  (incf (gethash name points) 5))))))

(defun expand-friends (girl relations)
  (let ((checked (list girl)))
    (labels ((iter (new)
	       (let ((really-new (remove-if #'(lambda (x) (member x checked :test #'equal)) new)))
		 (when really-new
		   (progn
		     (dolist (i really-new)
		       (push i checked))
		     (dolist (i really-new)
		       (iter (gethash i relations))))))))
      (iter (gethash girl relations))
      (remove girl checked))))

(defun perfect-girl (poll relations)
  (let ((points (make-hash-table :test #'equal))
	(girls nil))
    (maphash #'(lambda (name _)
		 (declare (ignore _))
		 (push name girls))
	     poll)
    (init-points girls points)
    (count-dirty poll points)
    (count-superhero girls poll points relations)
    (count-suits girls poll points relations)
    (count-cats girls poll points relations)
    (count-shoppers girls poll points relations)
    (loop for result being the hash-values in points maximizing result into max finally (return max))))

(defun add-relation (girl friends relations)
  (dolist (f friends)
    (pushnew f (gethash girl relations) :test #'equal)))

(defun process-in ()
  (let ((num-girls (read))
	(num-relations (read))
	(poll (make-hash-table :test #'equal))
	(relations (make-hash-table :test #'equal)))
    (dotimes (i num-girls)
      (let* ((line (split-sequence #\Space (read-line *standard-input*) :remove-empty-subseqs t)))
	(setf (gethash (car line) poll) (mapcar #'(lambda (x) (equal x "Y")) (cdr line)))))
    (dotimes (i num-relations)
      (let* ((line (split-sequence #\Space (read-line *standard-input*) :remove-empty-subseqs t)))
	(mapcar #'(lambda (x) (add-relation x (remove x line) relations)) line)))
    (format t "~a~%" (perfect-girl poll relations))))

(process-in)
